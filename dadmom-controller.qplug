-- DadMom Controller Plugin
-- by Elliott Balsley
-- January 2025

-- Information block for the plugin
PluginInfo = {
  Name = "DadMom Controller",
  Version = "0.3",
  BuildVersion = "0.3.1.1",
  Id = "15f3d80e-f9ab-4ffb-9e47-f926fe41ecde",
  Author = "Elliott Balsley",
  Description = "Plugin for the DadMom volume controller",
  ShowDebug = false
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "DadMom v" .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Control", "Setup", "Buttons" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  table.insert(props, {
    Name = "TB Latch Time",
    Type = "enum",
    Choices = {
      "100ms",
      "200ms",
      "300ms",
      "400ms",
      "500ms"
      },
    Value = "200ms",
  })
  return props
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then
    props["Debug Print"].IsHidden = true
  end
  return props
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  if PluginInfo["ShowDebug"] then
    table.insert(ctrls, {
      Name = "code",
      ControlType = "Text",
      PinStyle = "Input"
    })
  end
  
  table.insert (ctrls, {
    Name = 'IPAddress',
    ControlType = 'Text',
    UserPin = false,
  })
  
  table.insert (ctrls, {
    Name = 'Status',
    ControlType = 'Indicator',
    IndicatorType = 'Status',
    UserPin = true,
    PinStyle = 'Output',
  })
  
  table.insert(ctrls, {
    Name = "Level",
    ControlType = "Knob",
    PinStyle = "Both",
    ControlUnit = "dB",
    Min = -40,
    Max = 12
  })
  
  table.insert(ctrls, {
    Name = "TB",
    ControlType = "Button",
    ButtonType = "Toggle",
    UserPin = true,
    PinStyle = "Both",
  })
  
  table.insert(ctrls, {
    Name = "Dim",
    ControlType = "Button",
    ButtonType = "Toggle",
    PinStyle = "Both",
  })
  
  table.insert(ctrls, {
    Name = "Cut",
    ControlType = "Button",
    ButtonType = "Toggle",
    PinStyle = "Both",
  })
  
  table.insert(ctrls, {
    Name = "Ref",
    ControlType = "Button",
    ButtonType = "Toggle",
    UserPin = true,
    PinStyle = "Both"
  })
  
  table.insert(ctrls, {
    Name = "External",
    ControlType = "Button",
    ButtonType = "Toggle",
  })
  
  table.insert(ctrls, {
    Name = "Identify",
    ControlType = "Button",
    ButtonType = "Toggle",
  })
  
  table.insert (ctrls, {
    Name = 'SerialNumber',
    ControlType = 'Text',
    PinStyle = "Output",
    UserPin = true,
  })
  table.insert (ctrls, {
    Name = 'DeviceFirmware',
    ControlType = 'Text',
    PinStyle = "Output",
    UserPin = true
  })
  table.insert (ctrls, {
    Name = 'DeviceModel',
    ControlType = 'Text',
    PinStyle = "Output",
    UserPin = true
  })
  table.insert (ctrls, {
    Name = 'LedIntensity',
    ControlType = 'Knob',
    ControlUnit = 'Integer',
    Min = 1,
    Max = 3
  })
  
  table.insert (ctrls, {
    Name = 'SelectedSpeaker',
    ControlType = 'Knob',
    ControlUnit = 'Integer',
    Min = 1,
    Max = 12,
    PinStyle = "Both",
    UserPin = true
  })
  
  table.insert (ctrls, {
    Name = 'SelectedSource',
    ControlType = 'Knob',
    ControlUnit = 'Integer',
    Min = 1,
    Max = 12,
    PinStyle = "Both",
    UserPin = true
  })
  
  table.insert(ctrls, {
    Name = "Spkr",
    ControlType = "Button",
    ButtonType = "Toggle",
    Count = 12,
    UserPin = true,
    PinStyle = "Output"
  })
  table.insert(ctrls, {
    Name = "Src",
    ControlType = "Button",
    ButtonType = "Toggle",
    Count = 12,
    UserPin = true,
    PinStyle = "Output"
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  if PluginInfo["ShowDebug"] then
    layout["code"] = {
      Style = "None",
      PrettyName = "Code",
    }
  end
  
  local DadMomPhoto = ""
  
  local CurrentPage = PageNames[props["page_index"].Value]
  if CurrentPage == "Control" then
    table.insert(graphics,{
      Type = "Image",
      Image = DadMomPhoto,
      Position = {0,0},
      Size = {500,283}
    })
    layout['Level'] = {
      Position = {335,107},
      Size = {59,53},
      Style = 'Knob'
    }
    layout['TB'] = {
      Position = {254,208},
      Size = {32,32},
    }
    layout['Dim'] = {
      Position = {442,208},
      Size = {32,32},
    }
    layout['Cut'] = {
      Position = {442,39},
      Size = {32,32},
    }
    layout['Ref'] = {
      Position = {254,39},
      Size = {32,32},
    }
    layout['SelectedSpeaker'] = {
      Style = 'ComboBox',
      Position = {26,123},
      Size = {180,32},
      Color = {235,235,235},
      FontSize = 14
    }
    layout['SelectedSource'] = {
      Style = 'ComboBox',
      Position = {26,188},
      Size = {180,32},
      Color = {255,255,255},
      FontSize = 14
    }
  
  elseif CurrentPage == "Setup" then
    table.insert(graphics, {
      Type = 'GroupBox',
      Position = { 0, 0 },
      Size = { 304, 226 },
      CornerRadius = 8
    })
    table.insert(graphics, {
      Type = 'Header',
      Text = "CONNECTION SETUP",
      Position = { 13, 13 },
      Size = { 279, 6 },
      FontSize = 14,
    })
  
    table.insert(graphics,{
      Type = "Label",
      Text = "IP:",
      Position = { 5,34 },
      Size = { 67,20 },
      FontSize = 14,
      HTextAlign = "Right",
    })
    layout["IPAddress"] = {
      Style = "Text",
      Position = { 84,34 },
      Size = { 120, 20 },
    }
    layout["Identify"] = {
      Style = "Button",
      Position = { 213,34 },
      Size = { 72, 20 },
      Legend = "Identify",
      CornerRadius = 2,
      StrokeWidth = 1,
      Margin = 0,
      FontSize = 12,
      UnlinkOffColor = true,
      OffColor = { 194,194,194 },
      Color = { 0,231,30 }
    }
  
    table.insert(graphics,{
      Type = "Label",
      Text = "Status",
      Position = { 20,64 },
      Size = { 52,20 },
      FontSize = 14,
      HTextAlign = "Right",
    })
    layout['Status'] = {
      Position = { 84,64 },
      Size = { 201, 20 },
      PrettyName = "Status~Status"
    }
  
    table.insert(graphics, {
      Type = 'Header',
      Text = "DEVICE INFORMATION",
      Position = { 13, 105 },
      Size = { 279, 6 },
      FontSize = 14,
    })
  
    table.insert(graphics,{
      Type = "Label",
      Text = "Model",
      Position = { 25,124 },
      Size = { 103,16 },
      FontSize = 10,
    })
    layout['DeviceModel'] = {
      Position = { 25,140 },
      Size = { 103, 20 },
      IsReadOnly = true,
      PrettyName = "Status~Device Model"
    }
  
    table.insert(graphics,{
      Type = "Label",
      Text = "Software Version",
      Position = { 177,124 },
      Size = { 103,16 },
      FontSize = 10,
    })
    layout['DeviceFirmware'] = {
      Position = { 177,140 },
      Size = { 103, 20 },
      IsReadOnly = true,
      PrettyName = "Status~Device Firmware"
    }
  
    table.insert(graphics,{
      Type = "Label",
      Text = "Serial Number",
      Position = { 25,171 },
      Size = { 103,16 },
      FontSize = 10
    })
    layout['SerialNumber'] = {
      Position = { 25,187 },
      Size = { 103, 20 },
      IsReadOnly = true,
      PrettyName = "Status~Serial Number"
    }
  
    table.insert(graphics,{
      Type = "Label",
      Text = "LED Intensity",
      Position = { 177,171 },
      Size = { 103,16 },
      FontSize = 10
    })
    layout['LedIntensity'] = {
      Position = { 177,187 },
      Style = "Fader",
      Size = { 103, 20 },
    }
  
    table.insert(graphics, {
      Type = 'Label',
      Text = "Version " ..PluginInfo.BuildVersion,
      Position = { 0,210 },
      Size = { 67,20 },
      FontSize = 9,
      HTextAlign = "Left"
    })
  
  elseif CurrentPage == "Buttons" then
    table.insert(graphics, {
      Type = 'Header',
      Text = "Spkr",
      Position = { 15,14 },
      Size = { 424,6 },
      FontSize = 14,
    })
  
    table.insert(graphics, {
      Type = 'Header',
      Text = "Src",
      Position = { 15,105 },
      Size = { 424,6 },
      FontSize = 14,
    })
  
    for i=1,12 do
      layout["Spkr " .. i] = {
        Style = "Button",
        Position = { 11 + 36*(i-1), 31 },
        Size = { 32,32 },
        Legend = tostring(i),
        FontSize = 14,
        Margin = 0,
        PrettyName = "Spkr~"..i
      }
      layout["Src " .. i] = {
        Style = "Button",
        Position = { 11 + 36*(i-1), 124 },
        Size = { 32,32 },
        Legend = tostring(i),
        FontSize = 14,
        Margin = 0,
        PrettyName = "Src~"..i
      }
    end
  end
  return layout, graphics
end

--Start event based logic
if Controls and not PluginInfo["ShowDebug"] then
  -- helper function for debugging
  function Dump(o, indent)
    if indent == nil then indent = 0 end
    if type(o) == 'table' then
      local s = '{ '
      for k,v in pairs(o) do
        if type(k) ~= 'number' then k = '"'..k..'"' end
        s = s .. '\n' .. string.rep(' ', indent)  .. '['..k..'] = ' .. Dump(v, indent+2) .. ', '
      end
      return s .. ' }'
    else
      return tostring(o)
    end
  end -- end Dump
  
  function Connect()
    -- initialize controls on first load and after reconnecting
    Controls.Identify.Legend = "Identify"
    Controls.Identify.IsDisabled = false
    Controls.DeviceFirmware.String = ''
    Controls.DeviceModel.String = ''
    Controls.SerialNumber.String = ''
  
    local control_port = 10003
    local host = Controls.IPAddress.String
    if host == "" then
      Controls.Status.Value = 4 -- missing
      Controls.Status.String = "Invalid IP"
      MOM:Disconnect()
    else
      Controls.Status.Value = 5 -- initializing
      MOM:Connect(host, control_port)
    end
  end -- end Connect
  
  function Send(msg)
    if DebugTx then print("Tx: " .. msg) end
    MOM:Write(msg .. '\r')
  end -- end Send
  
  function RectifySpeakerSelector()
    -- set button and LED states to match the current layer
    for i=1,3 do
      if Controls.SelectedSpeaker.Value == Layer * 3 + i then
        Send('&sledstate,' .. i .. ',1')
      else
        Send('&sledstate,' .. i .. ',0')
      end
    end
  
    for i=1,12 do
      if i == Controls.SelectedSpeaker.Value then
        Controls['Spkr'][i].Value = 1
      else
        Controls['Spkr'][i].Value = 0
      end
    end
  end -- end RectifySpeakerSelector
  
  function RectifySourceSelector()
    -- set button and LED states to match the current layer
    for i=4,6 do
      if Controls.SelectedSource.Value == Layer * 3 + i - 3 then
        Send('&sledstate,' .. i .. ',1')
      else
        Send('&sledstate,' .. i .. ',0')
      end
    end
    for i=1,12 do
      if i == Controls.SelectedSource.Value then
        Controls['Src'][i].Value = 1
      else
        Controls['Src'][i].Value = 0
      end
    end
  end -- end RectifySourceSelector
  
  function ProcessMessage(data)
    -- process messages from device
    if data == '?aliverequest' then
      Send(':aliverequest,0')
      return
    end
  
    local som, name, result, remainder = data:gmatch("([:!])(%a+),(%d)(.*)")()
    local params = nil
    if som == ":" then
      local msg_type = "reply"
    elseif som == "!" then
      local msg_type = "notification"
    else
      if DebugRx then print("Unknown message: " .. data) end
      return
    end
  
    if result ~= '0' then
      if DebugRx then print("Unsuccessful: " .. data) end
      return
    end
  
    if remainder then
      params = {}
      for value in remainder:gmatch("([^,]+)") do
        table.insert(params, value)
      end
    end
  
    if name == 'gswver' then
      Controls.DeviceFirmware.String = params[3]:sub(2,-2)
  
    elseif name == 'gdevinfo' then
      Controls.DeviceModel.String = params[1]:sub(2,-2)
      Controls.SerialNumber.String = params[3]:sub(2,-2)
  
    elseif name == 'gkeystate' then
      local key = tonumber(params[1])
      local state = params[2]
      if DebugFunction then print("Pressed key: " .. Keys[key] .. " state: " .. state) end
  
      if key == 12 then
        -- external switch not implemented
        return
  
      elseif key == 9 then
        -- TB latching/momentary
        Send('%sledstate,' .. key .. ',' .. state)
        Controls[Keys[key]].Value = state
  
      -- ignore key up events for raw keys
      elseif state == '1' then
        if key >= 1 and key <= 3 then
          -- Spkr
          Controls.SelectedSpeaker.Value = key + Layer*3
          RectifySpeakerSelector()
  
        elseif key >= 4 and key <= 6 then
          -- Src
          Controls.SelectedSource.Value = key - 3 + Layer*3
          RectifySourceSelector()
  
        elseif key == 7 then
          -- Ref
          Controls.Level.Value = 0
          Controls.Ref.Value = (Controls.Ref.Value == 0) and 1 or 0
          Controls.Level.IsDisabled = Controls.Ref.Boolean
          HandleLevelChange(0)
          Send('%sledstate,' .. key .. ',' .. Controls.Ref.Value)
  
        elseif key == 8 or key == 10 then
          Controls[Keys[key]].Value = (Controls[Keys[key]].Value == 0) and 1 or 0
          Send('%sledstate,' .. key .. ',' .. math.floor(Controls[Keys[key]].Value))
  
        elseif key == 11 then
          -- Layer
          if Layer == 3 then
            Layer = 0
          else
            Layer = Layer + 1
          end
  
          for i=0,3 do
            if i == Layer then
              Send("&sringledstate," .. i+28 .. ",1")
            else
              Send("&sringledstate," .. i+28 .. ",0")
            end
          end
          if DebugFunction then print("Switched to layer", Layer+1) end
          RectifySpeakerSelector()
          RectifySourceSelector()
        end
      end
  
    elseif name == 'grotcount' then
      local count = params[1]
      local difference = count - RotaryCount
  
      -- Handle 16-bit rotary encoder wrap around
      if difference > 32000 then
        difference = difference - 65535 - 1
      elseif difference < -32000 then
        difference = difference + 65535 + 1
      end
  
      local change = 0.5 * difference
      local new_level = Controls.Level.Value + change
      HandleLevelChange(new_level)
      RotaryCount = count -- 0 thru 65535
  
    elseif name == 'smaster' then
      -- initialize hardware state after we become the master
      --Send('&sclear')
      --Send('&salivetime,300')
  
      -- all keys are raw mode except TB
      for key=1,8 do
        Send('&skeymode,' .. key .. ',1,0')
        Send('&sledstate,' .. key .. ',1,0')
      end
      Send('&skeymode,10,1,0')
      Send('&skeymode,11,1,0')
  
      -- TB key is momentary/latch mode
      Send('&skeymode,9,2,' .. math.floor(LatchTimeoutMilliseconds/100))
  
      -- initialize all button and LED states
      for led=1,27 do
        Send("&sringledstate," .. led .. ",0")
      end
  
      for led=28,31 do
        if led == Layer + 28 then
          Send("&sringledstate," .. led .. ",1")
        else
          Send("&sringledstate," .. led .. ",0")
        end
      end
  
  
      Send('&sledstate,7,' .. math.floor(Controls.Ref.Value))
      Send('&sledstate,8,' .. math.floor(Controls.Dim.Value))
      Send('&sledstate,9,' .. math.floor(Controls.TB.Value))
      Send('&sledstate,10,' .. math.floor(Controls.Cut.Value))
      Send('&sledstate,11,0')
  
      RectifySpeakerSelector()
      RectifySourceSelector()
      HandleLevelChange(Controls.Level.Value)
  
      Send("%sledint," .. Controls['LedIntensity'].Value)
    end
  end -- end ProcessMessage
  
  function HandleLevelChange(level_db)
    -- Ring LED numbers 1-27
    -- State 0=off, 1=green, 2=red, 3=orange
    -- Each LED represents 2 dB
  
    if Controls.Ref.Boolean then
      level_db = 0
    end
  
    Controls.Level.Value = level_db
    -- avoid out-of-range values
    if level_db > 12 then
      level_db = 12
    elseif level_db < -40 then
      level_db = -40
    end
  
    -- three different cases to set ring LEDs
    local offset_db = level_db + 40 -- scale to range 0-52
    local newLedState = {}
  
    -- even integer shows one red dot
    if offset_db % 2 == 0 then
      if DebugFunction then print(level_db .. ' is even integer') end
      for led=1,27 do
        if (led-1)*2 == offset_db then
          newLedState[led] = '2'
        else
          newLedState[led] = '0'
        end
      end
  
    -- odd integers show two orange dots
    elseif offset_db % 1 == 0 then
      if DebugFunction then print(level_db .. ' is odd integer') end
      for led=1,27 do
        if (led-1)*2 == offset_db-1 then
          newLedState[led] = '3'
        elseif (led-2)*2 == offset_db-1 then
          newLedState[led] = '3'
        else
          newLedState[led] = '0'
        end
      end
  
    -- fractional numbers show green and orange
    else
      if DebugFunction then print(level_db .. ' is fractional') end
      local rounded = math.floor(offset_db + 0.5)
      local lowerEven, higherEven, nearestEven, orangePosition
  
      if rounded % 2 == 0 then
        nearestEven = rounded
  
        if offset_db > nearestEven then
          orangePosition = 'higher'
        else
          orangePosition = 'lower'
        end
  
      else
        lowerEven = rounded - 1
        higherEven = rounded + 1
  
        if (offset_db - lowerEven) < (higherEven - offset_db) then
          nearestEven = lowerEven
          orangePosition = 'higher'
        else
          nearestEven = higherEven
          orangePosition = 'lower'
        end
      end
  
      for led=1,27 do
        if (led-1)*2 == nearestEven then
          newLedState[led] = '1'
        elseif orangePosition == 'higher' and (led-1)*2 == nearestEven+2 then
          newLedState[led] = '3'
        elseif orangePosition == 'lower' and (led-1)*2 == nearestEven-2 then
          newLedState[led] = '3'
        else
          newLedState[led] = '0'
        end
      end
    end
  
    -- compare against previous state to change only the LEDs which differ
    for i = 1,27 do
      if RingLedState[i] ~= newLedState[i] then
        if DebugFunction then print("Turning ring LED " .. i .. " to " .. newLedState[i]) end
        Send('%sringledstate,' .. i .. "," .. newLedState[i])
      end
    end
    RingLedState = newLedState
  end -- end HandleLevelChange
  
  -- define Debug print options
  DebugTx, DebugRx, DebugFunction = false, false, false
  DebugPrint = Properties['Debug Print'].Value
  if DebugPrint == 'Tx/Rx' then
    DebugTx, DebugRx = true, true
  elseif DebugPrint == 'Tx' then
    DebugTx = true
  elseif DebugPrint == 'Rx' then
    DebugRx = true
  elseif DebugPrint == 'Function Calls' then
    DebugFunction = true
  elseif DebugPrint == 'All' then
    DebugTx, DebugRx, DebugFunction = true, true, true
  end
  
  MOM = TcpSocket.New()
  MOM.ReadTimeout = 11
  MOM.EventHandler = function(sock, evt, err)
    if evt == TcpSocket.Events.Connected then
      print("TCP socket is connected")
      Controls.Status.Value = 0 -- OK
      -- Send("?ghwconf,2")
      Send('&smaster,1')
      Send('?gdevinfo')
      Send('?gswver,2')
      AliveTimer:Start(10)
  
    elseif evt == TcpSocket.Events.Reconnect then
      print("TCP socket is reconnecting")
      Controls.Status.Value = 5 -- initializing
  
    elseif evt == TcpSocket.Events.Data then
      local message = MOM:ReadLine(TcpSocket.EOL.Any)
      while (message ~= nil) do
        if DebugRx then print("Rx: " .. message ) end
        ProcessMessage(message)
        message = MOM:ReadLine(TcpSocket.EOL.Any)
      end
  
    elseif evt == TcpSocket.Events.Closed then
      print("TCP socket was closed by the remote end")
      Controls.Status.Value = 2 -- fault
      Controls.Status.String = "socket closed"
      AliveTimer:Stop()
  
    elseif evt == TcpSocket.Events.Error then
      print("TCP socket had an error:", err)
      Controls.Status.Value = 2 -- fault
      Controls.Status.String = err
  
    elseif evt == TcpSocket.Events.Timeout then
      print("TCP socket timed out", err)
      Controls.Status.Value = 2 -- fault
      Controls.Status.String = "socket timeout"
      AliveTimer:Stop()
    end
  end
  
  RotaryCount = 0
  Layer = 0
  LatchTimeoutMilliseconds = Properties['TB Latch Time'].Value:sub(1,-3)
  
  AliveTimer = Timer.New()
  AliveTimer.EventHandler = function()
    Send('?aliverequest')
  end
  
  Keys = {
    'Spkr 1', -- 1
    'Spkr 2', -- 2
    'Spkr 3', -- 3
    'Src A',  -- 4
    'Src B',  -- 5
    'Src C',  -- 6
    'Ref',    -- 7
    'Dim',    -- 8
    'TB',     -- 9
    'Cut',    -- 10
    'Layer',  -- 11
    'External'-- 12
  }
  
  RingLedState = {}
  for i = 1, 27 do
      RingLedState[i] = '0'
  end
  
  Controls.IPAddress.EventHandler = function(ctl)
    Connect()
  end
  
  -- light up the LEDs for 10 seconds
  Controls.Identify.EventHandler = function(ctl)
    if ctl.Value == 1 then
      ctl.IsDisabled = true
      Send("%sidentify,10")
      local identify_timer = Timer.New()
      local count = 9
      identify_timer.EventHandler = function()
        if count == 0 then
          identify_timer:Stop()
          ctl.IsDisabled = false
          ctl.Legend = "Identify"
          ctl.Value = false
        else
          ctl.Legend = tostring(count)
          count = count - 1
        end
      end
    identify_timer:Start(1)
    end
  end
  
  Controls.LedIntensity.EventHandler = function(ctl)
    Send("%sledint," .. ctl.Value)
  end
  
  Controls.Level.EventHandler = function(ctl)
    HandleLevelChange(ctl.Value)
  end
  
  -- create event handlers for each toggle button
  for idx, name in ipairs(Keys) do
    if idx >= 7 and idx <= 10 then
      Controls[name].EventHandler = function(ctl)
        Send('&sledstate,' .. idx .. ',' .. math.floor(ctl.Value))
      end
    end
  end
  
  Controls.SelectedSpeaker.EventHandler = RectifySpeakerSelector
  Controls.SelectedSource.EventHandler = RectifySourceSelector
  
  Controls.Ref.EventHandler = function(ctl)
    Controls.Level.IsDisabled = ctl.Boolean
    if ctl.Boolean then
      Controls.Level.Value = 0
      HandleLevelChange(0)
    end
    Send('&sledstate,7,' .. math.floor(ctl.Value))
  end
  
  -- when code Control is present, the Index gets pushed
  for i=1,12 do
    Controls['Spkr'][i].EventHandler = function(ctl)
      Controls.SelectedSpeaker.Value = ctl.Index - 15 + (PluginInfo["ShowDebug"] and 1 or 0)
      RectifySpeakerSelector()
    end
    Controls['Src'][i].EventHandler = function(ctl)
      Controls.SelectedSource.Value = ctl.Index - 27 + (PluginInfo["ShowDebug"] and 1 or 0)
      RectifySourceSelector()
    end
  end
  
  Connect()
end
